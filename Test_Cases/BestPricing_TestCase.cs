using Leet_Code_Examples.Coding_Problems.Medium;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xunit.Sdk;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace Leet_Code_Solution.Test_Cases
{
    /// <summary>
    /// Some mock test cases for the Best Pricing Problem.
    /// </summary>
    [TestClass]
    public class BestPricing_TestCase
    {
        private void OutputValue(List<int[]> arrays, string methodName)
        {
            BestPricing_CodingProblem bestPricing = new BestPricing_CodingProblem();
            Stopwatch s = new Stopwatch();
            for (int i = 0; i < arrays.Count; i++)
            {
                s.Restart();
                s.Start();
                Console.WriteLine($"The Best Pricing for the given method {methodName}'s values at index {i} is {bestPricing.MaxProfit(arrays[i])} : Total Time to come to this answer: {s.Elapsed}");
                s.Stop();
            }
        }

        [TestMethod]
        public void RunCompleteBestPricing()
        {
            List<int[]> arrays = new List<int[]>();
            int[] values1 = { 7, 1, 5, 3, 6, 4 };
            arrays.Add(values1);
            int[] values2 = { 7, 6, 4, 3, 1 };
            arrays.Add(values2);
            int[] speedTest = { 7, 6, 4, 3, 1, 1, 2, 4, 5, 6, 7, 1, 3, 4, 5, 4, 1, 4, 7, 8, 5, 65, 123, 312, 3123, 53, 43, 32, 3, 53, 1, 32, 1, 23, 123, 12, 31, 23, 12, 3, 123, 123, 54, 365, 763, 45, 345, 1, 234, 5634, 66, 42, 34, 123, 1, 354, 36, 34567, 3245, 1, 23, 12, 42, 46, 35, 23, 42, 34, 6, 45, 2, 34, 1243, 12, 534, 3456, 23, 4, 123, 12, 31, 5, 436, 435, 7, 4567, 34, 5, 1234, 412, 3, 125, 345, 645, 76, 45678, 4, 635, 234, 2, 34, 1, 3, 234, 3, 12, 3, 45, 34, 62, 34, 2, 356, 45, 756, 8, 456, 45, 6, 2345, 213, 42, 354, 3546, 4, 73, 45, 324, 521, 34, 123, 5432, 46, 457, 456, 63, 45, 23, 4, 245, 45, 745, 6, 34, 52, 34, 2346, 54, 74, 56, 34, 5, 234, 2, 34, 2465, 54, 74, 6734, 56, 34, 52, 35, 24, 563, 576, 4568, 45, 6, 2345, 23, 5, 3576, 46, 345, 34, 53, 3, 12, 1, 3, 432, 345, 36, 356, 456, 875, 7845, 123, 4, 5, 457, 54, 734, 5, 345, 7, 76, 456, 4, 56, 23, 423, 4, 676, 5, 576, 3, 5, 2, 4, 564, 67, 56, 8745, 3, 45, 2, 1234, 2, 34, 65, 64, 56, 233, 4, 246, 5347, 2, 52, 5, 234, 12, 3, 25, 357, 63, 1, 3, 14, 123, 5, 34, 653, 457, 254, 2, 535, 7646, 7, 45, 35, 345, 7, 4, 7, 34, 72, 334, 234, 2, 576, 3, 4, 53, 45, 123, 453, 6, 367, 32, 45, 3, 63, 6, 34, 53, 5, 235, 2, 6, 256, 2, 56, 278, 2456, 245, 72, 56, 24, 6532, 462, 45, 1, 5145, 1234, 1, 324, 3461, 1, 75, 11, 8, 1, 8, 5, 37, 3268, 123, 2, 45, 456, 2345, 73, 4568, 476, 4, 6, 2345, 235, 2466, 7824, 6, 2356, 63468, 345, 723, 6, 248, 24, 67, 2456, 2, 56, 24345, 624, 57, 245, 723, 45, 2346, 42366, 835, 789, 3567, 2345, 78, 4579, 47, 824, 56, 3468, 457, 98, 3456, 2435, 746, 79, 478, 3456, 745, 3739, 467, 834, 567, 8, 4, 79, 234567, 3425, 62, 36, 235, 635, 698, 39, 245567, 3, 68, 356, 734, 56, 245, 69, 3, 6, 645, 74, 32, 23, 623, 56, 2345, 54123, 5, 134, 513, 71, 357, 154, 1, 45, 1234, 51, 2345, 12, 1243, 51, 246, 13476, 13, 41, 345, 1345, 14, 5, 4567, 3465, 723, 56, 145, 14, 513, 6, 13, 61, 3456, 1324, 51, 45, 145, 13, 451, 357, 135, 713, 57, 134, 513, 45, 13, 456, 1357, 134, 55, 13, 45, 13, 45, 213456, 23, 567, 1 };
            arrays.Add(speedTest);
            int[] overflowTest = {};
            arrays.Add(overflowTest);
            OutputValue(arrays, "Complete Pricing");
        }

        [TestMethod]
        public void RunGenericBestPricing()
        {
            List<int[]> arrays = new List<int[]>();
            int[] values1 = { 7, 1, 5, 3, 6, 4 };
            arrays.Add(values1);
            int[] values2 = { 7, 6, 4, 3, 1 };
            arrays.Add(values2);
            OutputValue(arrays, "Generic Pricing");
        }

        [TestMethod]
        public void RunSpeedTestBestPricing()
        {
            List<int[]> arrays = new List<int[]>();
            int[] speedTest = { 7, 6, 4, 3, 1, 1, 2, 4, 5, 6, 7, 1, 3, 4, 5, 4, 1, 4, 7, 8, 5, 65, 123, 312, 3123, 53, 43, 32, 3, 53, 1, 32, 1, 23, 123, 12, 31, 23, 12, 3, 123, 123, 54, 365, 763, 45, 345, 1, 234, 5634, 66, 42, 34, 123, 1, 354, 36, 34567, 3245, 1, 23, 12, 42, 46, 35, 23, 42, 34, 6, 45, 2, 34, 1243, 12, 534, 3456, 23, 4, 123, 12, 31, 5, 436, 435, 7, 4567, 34, 5, 1234, 412, 3, 125, 345, 645, 76, 45678, 4, 635, 234, 2, 34, 1, 3, 234, 3, 12, 3, 45, 34, 62, 34, 2, 356, 45, 756, 8, 456, 45, 6, 2345, 213, 42, 354, 3546, 4, 73, 45, 324, 521, 34, 123, 5432, 46, 457, 456, 63, 45, 23, 4, 245, 45, 745, 6, 34, 52, 34, 2346, 54, 74, 56, 34, 5, 234, 2, 34, 2465, 54, 74, 6734, 56, 34, 52, 35, 24, 563, 576, 4568, 45, 6, 2345, 23, 5, 3576, 46, 345, 34, 53, 3, 12, 1, 3, 432, 345, 36, 356, 456, 875, 7845, 123, 4, 5, 457, 54, 734, 5, 345, 7, 76, 456, 4, 56, 23, 423, 4, 676, 5, 576, 3, 5, 2, 4, 564, 67, 56, 8745, 3, 45, 2, 1234, 2, 34, 65, 64, 56, 233, 4, 246, 5347, 2, 52, 5, 234, 12, 3, 25, 357, 63, 1, 3, 14, 123, 5, 34, 653, 457, 254, 2, 535, 7646, 7, 45, 35, 345, 7, 4, 7, 34, 72, 334, 234, 2, 576, 3, 4, 53, 45, 123, 453, 6, 367, 32, 45, 3, 63, 6, 34, 53, 5, 235, 2, 6, 256, 2, 56, 278, 2456, 245, 72, 56, 24, 6532, 462, 45, 1, 5145, 1234, 1, 324, 3461, 1, 75, 11, 8, 1, 8, 5, 37, 3268, 123, 2, 45, 456, 2345, 73, 4568, 476, 4, 6, 2345, 235, 2466, 7824, 6, 2356, 63468, 345, 723, 6, 248, 24, 67, 2456, 2, 56, 24345, 624, 57, 245, 723, 45, 2346, 42366, 835, 789, 3567, 2345, 78, 4579, 47, 824, 56, 3468, 457, 98, 3456, 2435, 746, 79, 478, 3456, 745, 3739, 467, 834, 567, 8, 4, 79, 234567, 3425, 62, 36, 235, 635, 698, 39, 245567, 3, 68, 356, 734, 56, 245, 69, 3, 6, 645, 74, 32, 23, 623, 56, 2345, 54123, 5, 134, 513, 71, 357, 154, 1, 45, 1234, 51, 2345, 12, 1243, 51, 246, 13476, 13, 41, 345, 1345, 14, 5, 4567, 3465, 723, 56, 145, 14, 513, 6, 13, 61, 3456, 1324, 51, 45, 145, 13, 451, 357, 135, 713, 57, 134, 513, 45, 13, 456, 1357, 134, 55, 13, 45, 13, 45, 213456, 23, 567, 1 };
            arrays.Add(speedTest);

            OutputValue(arrays, "Speed Pricing");
        }


        [TestMethod]
        public void RunOverFlowBestPricing()
        {
            List<int[]> arrays = new List<int[]>();
            int[] overflowTest = {};
            arrays.Add(overflowTest);
            OutputValue(arrays, "Overflow Pricing");
        }

    }
}
